# app-sec-sca-blackduck.yml
#
# Description:
#   Steps template used for Black Duck scanning
#   Note: Build agent needs Linux set for pool's Agent OS, ex:
#
# Server Urls:
#   DEV: https://dev.blackduck.nfcu.net/
#   PROD: https://blackduck.nfcu.net/
#   See https://mkdocsautomationnfcu.z13.web.core.windows.net/how-to/checkmarx-black-duck-pipeline-setup/ for documentation
# Parameters:
#   blackduckInstance: String
#     The environment in which to run the Black Duck plugin against, with only two
#     acceptable values, BLACKDUCK-DEV and BLACKDUCK-PROD
#   detectArguments: String
#     Misc values provided to the detect tool, these generally do not need to be changed unless team needs it
#     Defaults to using Team Project Name (ex. Cloud Team) and repo (ex. azure-pipeline-yaml-templates) for Project Name
#     and the branch's name (ex. master or development) as the project's version
#   See: https://synopsys.atlassian.net/wiki/spaces/INTDOCS/pages/631374044/Detect+Properties for potential arguments
# PRERELEASE - Release and hotfix
# RELEASE - Master
# PLANNING - feature
# DEVELOPMENT - development & DEVELOPMENT

parameters:
# Black Duck instance. Only supported vals are BLACKDUCK-DEV or BLACKDUCK-PROD
- name: blackduckInstance
  type: string
  default: 'BLACKDUCK-PROD'
  values:
  - BLACKDUCK-DEV
  - BLACKDUCK-PROD
# Use if you would like to create a Black Duck project 'version' for a specific SourceBranchName
# Note: each project is only allowed 10 versions
- name: preserveBranchName
  type: boolean
  default: false
# Reserve Repo Name
# Developer can run scan for particular branch.
# ADO Extensions
- name: addTaskSummary
  type: boolean
  default: true
# AirGap functionality
- name: useAirGap
  type: boolean
  default: false
- name: extractedDetectDirectory
  type: string
  default: ''
# Use to add extra detect arguments to a scan
# Example extraArgs #--detect.tools.excluded=SIGNATURE_SCAN
- name: extraArgs
  type: string
  default: ''
# Use to add common detect arguments to a scan
- name: bdProjectName
  type: string
  default: |
    --detect.project.name="'$(System.TeamProject)/$(Build.Repository.Name)'"
- name: bdProjectNameW
  type: string
  default: --detect.project.name="$(System.TeamProject)/$(Build.Repository.Name)"
- name: commonArgs
  type: string
  default: --detect.detector.search.depth=5 --detect.timeout=900 --Detect.cleanup=true --detect.report.timeout=10000 --detect.risk.report.pdf.path="$(Build.StagingDirectory)/bdscans"
# Use to add rapid detect arguments to a scan
- name: bdArgsRapidArgs
  type: string
  default: --detect.blackduck.scan.mode=RAPID --detect.bom.aggregate.name=aggregated.bdio
# Use to add Full detect arguments to a scan
- name: bdArgsFullArgs
  type: string
  default: --detect.project.application.id="$(System.TeamProjectId)" --detect.project.description="$(Build.Repository.Name)" --detect.project.version.notes="Branch is $(Build.SourceBranchName) $(Build.SourceVersion) $(Build.SourceVersionMessage)"
# Use to add full detect arguments to refer scan version
- name: bdArgsMasterArgs
  type: string
  default: --detect.project.version.name=production --detect.project.version.phase=RELEASED --detect.policy.check.fail.on.severities=ALL
- name: bdArgsFeatureArgs
  type: string
  default: --detect.project.version.name=feature --detect.project.version.phase=PLANNING
- name: bdArgsReleaseArgs
  type: string
  default: --detect.project.version.name=release-$(Build.SourceBranchName) --detect.project.version.phase=PRERELEASE --detect.policy.check.fail.on.severities=ALL
- name: bdPrArgs
  type: string
  default: --detect.project.version.name=PR --detect.project.version.phase=PRERELEASE --detect.policy.check.fail.on.severities=ALL
- name: bdArgsDevelopArgs
  type: string
  default: --detect.project.version.name=development --detect.project.version.phase=DEVELOPMENT --detect.policy.check.fail.on.severities=ALL
#### To enable or disable the task
- name: enableTask
  type: boolean
  default: true
#### To support the task version
- name: taskVersion
  type: string
  default: '8'
  values:
  - '7'
  - '8'
# Passing ' at shell run time.
- name: q
  type: string
  default: "'"
#### Error flag
- name: continueOnError
  type: boolean
  default: true

- name: blackduckVarsYmlRef
  type: boolean
  default: false
- name: blackduckContinueOnError
  type: boolean
  default: true

steps:
- ${{ if eq(parameters.enableTask, true) }}:
  - ${{ if eq(parameters.blackduckVarsYmlRef, false) }}:
    - task: SynopsysDetectTask@${{ parameters.taskVersion }}
      displayName: 'SCA Scan Blackduck'
      name: SCAScanBlackduckL
      inputs:
        BlackDuckService: ${{ parameters.blackduckInstance }}
    #### Airgap capability
        ${{ if eq(parameters.useAirGap, true) }}:
          DetectRunMode: 'UseAirGap'
          DetectAirGapJarDirectoryPath: '${{ parameters.extractedDetectDirectory }}'
    #### preserveBranchName is false following the master as their production branch
        ${{ if eq(parameters.preserveBranchName, false) }}:
    #### If branch name is master or main. Blackduck runs a full scan and it will upload on production version.
          ${{ if or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.SourceBranchName'], 'main')) }}:
            DetectArguments: |
                ${{ parameters.bdProjectName }}
                ${{ parameters.bdArgsFullArgs }}
                ${{ parameters.bdArgsMasterArgs }}
                --detect.code.location.name="${{ parameters.q }}$(System.TeamProject)/$(Build.Repository.Name)-$(Build.SourceBranchName)${{ parameters.q }}"
                ${{ parameters.commonArgs }}
                ${{ parameters.extraArgs }}
          ${{ if or(eq(variables['Build.SourceBranchName'], 'develop'), eq(variables['Build.SourceBranchName'], 'development'), eq(variables['Build.SourceBranchName'], 'dev2')) }}:
            DetectArguments: |
                ${{ parameters.bdProjectName }}
                ${{ parameters.bdArgsFullArgs }}
                ${{ parameters.bdArgsDevelopArgs }}
                --detect.code.location.name="${{ parameters.q }}$(System.TeamProject)/$(Build.Repository.Name)-$(Build.SourceBranchName)${{ parameters.q }}"
                ${{ parameters.commonArgs }}
                ${{ parameters.extraArgs }}
    #### If build reason is PR. Blackduck runs a scan.
          ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
            DetectArguments: |
                ${{ parameters.bdProjectName }}
                ${{ parameters.bdArgsFullArgs }}
                ${{ parameters.bdPrArgs }}
                --detect.code.location.name="${{ parameters.q }}$(System.TeamProject)/$(Build.Repository.Name)-PR${{ parameters.q }}"
                ${{ parameters.commonArgs }} ${{ parameters.extraArgs }}
    #### If branch name is release or hotfix. Blackduck runs a full scan and it will upload on release version.
          ${{ if or(contains(lower(variables['Build.SourceBranch']), 'release'), contains(lower(variables['Build.SourceBranch']), 'hotfix')) }}:
            DetectArguments: |
                ${{ parameters.bdProjectName }}
                ${{ parameters.bdArgsFullArgs }}
                ${{ parameters.bdArgsReleaseArgs }}
                --detect.code.location.name="${{ parameters.q }}$(System.TeamProject)/$(Build.Repository.Name)-$(Build.SourceBranchName)-release-head${{ parameters.q }}"
                ${{ parameters.commonArgs }}
                ${{ parameters.extraArgs }}
    #### If branch name is feature or user. Blackduck runs a full scan and it will upload on feature version.
          ${{ if or(contains(lower(variables['Build.SourceBranch']), 'feature'), contains(lower(variables['Build.SourceBranch']), 'user')) }}:
            DetectArguments: |
                --detect.code.location.name="${{ parameters.q }}$(System.TeamProject)/$(Build.Repository.Name)-feature-head${{ parameters.q }}"
                ${{ parameters.bdArgsFullArgs }}
                ${{ parameters.bdArgsFeatureArgs }}
                ${{ parameters.commonArgs }}
                ${{ parameters.extraArgs }}
    #### This option can be used when they don't have master or main as production branch
        ${{ if eq(parameters.preserveBranchName, true) }}:
    #### If build reason is PR. Blackduck runs a rapid scan.
          ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
            DetectArguments: |
                ${{ parameters.bdProjectName }}
                ${{ parameters.bdArgsRapidArgs }}
                ${{ parameters.commonArgs }}
                ${{ parameters.extraArgs }}
          ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    #### If branch name is release or hotfix. Blackduck runs a full scan and it will upload on release version.
            ${{ if or(contains(lower(variables['Build.SourceBranch']), 'release'), contains(lower(variables['Build.SourceBranch']), 'hotfix')) }}:
              DetectArguments: |
                ${{ parameters.bdProjectName }}
                ${{ parameters.bdArgsFullArgs }}
                ${{ parameters.bdArgsReleaseArgs }}
                --detect.code.location.name="${{ parameters.q }}$(System.TeamProject)/$(Build.Repository.Name)-$(Build.SourceBranchName)-release-head${{ parameters.q }}"
                ${{ parameters.commonArgs }}
                ${{ parameters.extraArgs }}
    #### If branch name is develop or development. Blackduck runs a full scan and it will upload on production version. This is applicable if they don't have master or main as production branch.
            ${{ if or(eq(variables['Build.SourceBranchName'], 'develop'), eq(variables['Build.SourceBranchName'], 'development')) }}:
              DetectArguments: |
                ${{ parameters.bdProjectName }}
                ${{ parameters.bdArgsFullArgs }}
                ${{ parameters.bdArgsMasterArgs }}
                --detect.code.location.name="${{ parameters.q }}$(System.TeamProject)/$(Build.Repository.Name)-$(Build.SourceBranchName)${{ parameters.q }}"
                ${{ parameters.commonArgs }}
                ${{ parameters.extraArgs }}
            ${{ if or(eq(variables['Build.Reason'], 'Schedule'), contains(lower(variables['Build.SourceBranch']), 'feature'), contains(lower(variables['Build.SourceBranch']), 'user')) }}:
              DetectArguments: |
                ${{ parameters.bdProjectName }}
                ${{ parameters.bdArgsFullArgs }}
                ${{ parameters.bdArgsFeatureArgs }}
                --detect.code.location.name="${{ parameters.q }}$(System.TeamProject)/$(Build.Repository.Name)-feature-head${{ parameters.q }}"
                ${{ parameters.commonArgs }}
                ${{ parameters.extraArgs }}
    #### Posting scans success or failure status to ADO pipeline extensions
        AddTaskSummary: ${{ parameters.addTaskSummary }}
    #### Filtration branches names with condition. To skip scans on less significant branchs.
      condition: |
          and(succeeded(), startsWith(variables['Agent.OS'], 'Linux'), or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.Reason'], 'Schedule'), eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.SourceBranchName'], 'develop'), eq(variables['Build.SourceBranchName'], 'dev2'), eq(variables['Build.SourceBranchName'], 'development'), eq(variables['Build.SourceBranchName'], 'dev2'), contains(lower(variables['Build.SourceBranch']), 'hotfix'), contains(lower(variables['Build.SourceBranch']), 'release'), contains(lower(variables['Build.SourceBranch']), 'feature'), contains(lower(variables['Build.SourceBranch']), 'user')))
    #### Continue on error flag. This will be flagged when their is any upgrade or issues related to blackduck.
      continueOnError: ${{ parameters.continueOnError }}

    #### All vallues are ref from common-gates-variables.yml
  - ${{ if eq(parameters.blackduckVarsYmlRef, true) }}:
    - task: SynopsysDetectTask@${{ parameters.taskVersion }}
      displayName: 'SCA Scan Blackduck'
      name: SCAScanBlackduck
      #### Continue on error flag. This will be flagged when their is any upgrade or issues related to blackduck.
      inputs:
        BlackDuckService: $(blackduckInstance)
        DetectArguments: |
          $(blackduckDetectArguments)
        #### Posting scans success or failure status to ADO pipeline extensions
        AddTaskSummary: $(blackduckAddTaskSummary)
      continueOnError: ${{ parameters.blackduckContinueOnError }}
      #### Filter branch names with condition. To skip scans on less significant branchs.
      condition: |
          and(succeeded(), or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.Reason'], 'Schedule'), eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.SourceBranchName'], 'develop'), eq(variables['Build.SourceBranchName'], 'dev2'), eq(variables['Build.SourceBranchName'], 'development'), eq(variables['Build.SourceBranchName'], 'dev2'), contains(lower(variables['Build.SourceBranch']), 'hotfix'), contains(lower(variables['Build.SourceBranch']), 'release'), contains(lower(variables['Build.SourceBranch']), 'feature'), contains(lower(variables['Build.SourceBranch']), 'user')))
