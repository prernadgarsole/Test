parameters:
- name: pool
  type: string
  default: "Cloud Pool"
- name: checkmarxTaskVersion
  type: string
  default: '2023'
  values:
  - '2023'
- name: checkmarxEndpoint
  type: string
  default: 'CHECKMARX-PROD'
  values:
  - CHECKMARX-DEV
  - CHECKMARX-PROD
- name: checkmarxFullScansScheduled
  type: boolean
  default: true
- name: checkmarxIncScan
  type: boolean
  default: true
- name: checkmarxHigh
  type: number
  default: 0
- name: checkmarxMedium
  type: number
  default: 8
- name: checkmarxLow
  type: number
  default: 9999
- name: checkmarxComment
  type: string
  default: ""
- name: checkmarxFolderExclusion
  type: string
  default: ""
- name: checkmarxEnableProxy
  type: boolean
  default: false
- name: checkmarxProxyUrl
  type: string
  default: ""
- name: checkmarxEnableSastScan
  type: boolean
  default: true
- name: checkmarxPreset
  type: string
  default: Checkmarx Default
- name: checkmarxEnableDependencyScan
- name: checkmarxFailBuildForNewVulnerabilitiesSeverity
  type: string
  default: 'High'
- name: checkmarxDenyProject
  type: boolean
  default: false
- name: checkmarxPostScanAction
  type: string
  default: ""
- name: checkmarxFullTeamName
  type: string
  default: ""
- name: checkmarxProjectName
  type: string
  default: ""
- name: checkmarxAvoidDuplicateScans
  type: boolean
  default: true
- name: checkmarxVulnerabilityThreshold
  type: boolean
  default: false
- name: checkmarxFailBuildForNewVulnerabilitiesEnabled
  type: boolean
  default: false
- name: checkmarxGeneratePDFReport
  type: boolean
  default: false
- name: checkmarxContinueOnError
  type: boolean
  default: true

steps:
- ${{ if eq(parameters.checkmarxTaskVersion, '2023') }}:
  - task: Application security testing@2023
    continueOnError: ${{ parameters.checkmarxContinueOnError }}
    displayName: SAST Scan - $(System.TeamProject)/$(Build.Repository.Name)
    inputs:
      CheckmarxService: ${{ parameters.checkmarxEndpoint }}
      fullScansScheduled: ${{ parameters.checkmarxFullScansScheduled }}
      incScan: ${{ parameters.checkmarxIncScan }}
      high: ${{ parameters.checkmarxHigh }}
      medium: ${{ parameters.checkmarxMedium }}
      low: ${{ parameters.checkmarxLow }}
      comment: "${{ parameters.checkmarxComment }}"
      folderExclusion: "cvs, .svn, .hg , .git, .bzr, bin , obj,  backup, .idea, node_modules, azure-pipeline-yaml-templates, ${{ parameters.checkmarxFolderExclusion }}"
      fileExtension: '!**/*.DS_Store, !**/*.ipr, !**/*.iws, !**/*.bak, !**/*.tmp, !**/*.aac, !**/*.aif, !**/*.iff, !**/*.m3u, !**/*.mid, !**/*.mp3,!**/*.mpa, !**/*.ra, !**/*.wav, !**/*.wma, !**/*.3g2, !**/*.3gp, !**/*.asf, !**/*.asx, !**/*.avi,!**/*.flv, !**/*.mov, !**/*.mp4, !**/*.mpg,  !**/*.rm, !**/*.swf, !**/*.vob, !**/*.wmv, !**/*.bmp, !**/*.gif, !**/*.jpg, !**/*.png, !**/*.psd, !**/*.tif, !**/*.swf, !**/*.jar, !**/*.zip, !**/*.rar, !**/*.exe, !**/*.dll, !**/*.pdb, !**/*.7z, !**/*.gz, !**/*.tar.gz, !**/*.tar, !**/*.gz, !**/*.ahtm, !**/*.ahtml, !**/*.fhtml, !**/*.hdm, !**/*.hdml,   !**/*.hsql, !**/*.ht, !**/*.hta, !**/*.htc, !**/*.htd, !**/*.war, !**/*.ear, !**/*.htmls, !**/*.ihtml, !**/*.mht, !**/*.mhtm, !**/*.mhtml, !**/*.ssi, !**/*.stm, !**/*.stml, !**/*.ttml, !**/*.txn, !**/*.xhtm, !**/*.xhtml, !**/*.class, !**/*.iml'
      enableProxy: ${{ parameters.checkmarxEnableProxy }}
      proxyUrl: ${{ parameters.checkmarxProxyUrl }}
      enableSastScan: ${{ parameters.checkmarxEnableSastScan }}
      preset: ${{ parameters.checkmarxPreset }}
      enableDependencyScan: ${{ parameters.checkmarxEnableDependencyScan }}
      failBuildForNewVulnerabilitiesSeverity: ${{ parameters.checkmarxFailBuildForNewVulnerabilitiesSeverity }}
      denyProject: ${{ parameters.checkmarxDenyProject }}
      postScanAction: ${{ parameters.checkmarxPostScanAction }}
      ${{ if eq(parameters.checkmarxFullTeamName, '') }}:
        fullTeamName: "CxServer/$(System.TeamProject)"
      ${{ if ne(parameters.checkmarxFullTeamName, '') }}:
        fullTeamName: "${{ parameters.checkmarxFullTeamName }}"
      ${{ if eq(parameters.checkmarxProjectName, '') }}:
        projectName: "$(Build.Repository.Name)"
      ${{ if ne(parameters.checkmarxProjectName, '') }}:
        projectName: "${{ parameters.checkmarxProjectName }}"
      ${{ if or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranchName'], 'development'), eq(variables['Build.SourceBranchName'], 'develop'), eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.SourceBranchName'], 'main'), contains(lower(variables['Build.SourceBranch']), 'hotfix'), contains(lower(variables['Build.SourceBranch']), 'release'), contains(lower(variables['Build.SourceBranch']), 'bug')) }}:
        vulnerabilityThreshold: true
        avoidDuplicateScans: false
        syncMode: true
        generatePDFReport: true
        failBuildForNewVulnerabilitiesEnabled: true
      ${{ else }}:
        syncMode: false
        avoidDuplicateScans: ${{ parameters.checkmarxAvoidDuplicateScans }}
        vulnerabilityThreshold: ${{ parameters.checkmarxVulnerabilityThreshold }}
        failBuildForNewVulnerabilitiesEnabled: ${{ parameters.checkmarxFailBuildForNewVulnerabilitiesEnabled }}
        generatePDFReport: ${{ parameters.checkmarxGeneratePDFReport }}